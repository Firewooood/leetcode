import java.util.*;

public class test4 {
    static int n;
    static int ans = Integer.MAX_VALUE, cnt = 0;
    static int[][] f;
    static List<Integer>[] tree;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();
        tree = new List[n+1];
        for (int i = 1; i <= n; i++) {
            tree[i] = new ArrayList<>();
        }
        for (int i = 1; i < n; i++) {
            int u = sc.nextInt(), v = sc.nextInt();
            tree[u].add(v);
            tree[v].add(u);
        }
        f = new int[n+1][n+1];
        for (int i = 1; i <= n; i++) {
            Arrays.fill(f[i], Integer.MAX_VALUE);
        }
        for (int m = n/2; m <= n; m++) {
            dfs(1, 0, m);
            if (f[1][m] < ans) {
                ans = f[1][m];
                cnt = 1;
            } else if (f[1][m] == ans) {
                cnt++;
            }
        }
        System.out.println(ans + " " + cnt);
    }

    static void dfs(int u, int fa, int m) {
        f[u][0] = 0;
        for (int v : tree[u]) {
            if (v == fa) {
                continue;
            }
            dfs(v, u, m);
            for (int j = m; j >= 0; j--) {
                for (int k = Math.min(j, m); k >= 0; k--) {
                    f[u][j] = Math.min(f[u][j], f[u][j-k] + f[v][k]);
                }
            }
        }
        for (int j = m; j >= 0; j--) {
            f[u][j] = Math.min(f[u][j], Math.abs(j - count(u, fa) - (n - count(u, fa))));
        }
    }

    static int count(int u, int fa) {
        int res = 1;
        for (int v : tree[u]) {
            if (v == fa) {
                continue;
            }
            res += count(v, u);
        }
        return res;
    }
}